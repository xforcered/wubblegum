from smartcard.System import readers
from smartcard.util import toHexString
from smartcard.Exceptions import NoCardException, NoReadersException
from apdu_utils import mifare_sector_read



def load_and_auth_brute_forced_keys(reader):

    connection = None
    try:
        connection = readers()[reader].createConnection()
        connection.connect()
    except IndexError:
        print("Invalid card reader number, please try --show-readers and choose one of\n"
        "the displayed options.")
        exit()
    except NoReadersException:
        print("No smart card reader found. Check that your reader is connected.")
        exit()
    except NoCardException:
        print("No smart card inserted. If you have multiple smart card readers, you may "
        "select a specific reader with the -r switch.")
        exit()
    

    brute_forced_keys = [ [0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5],
                        [0xA5, 0xA4, 0xA3, 0xA2, 0xA1, 0xA0],
                        [0x89, 0xEC, 0xA9, 0x7F, 0x8C, 0x2A],
                        [0x48, 0x49, 0x44, 0x20, 0x49, 0x53],
                        [0x20, 0x47, 0x52, 0x45, 0x41, 0x54],
                        [0x3B, 0x7E, 0x4F, 0xD5, 0x75, 0xAD],
                        [0x11, 0x49, 0x6F, 0x97, 0x75, 0x2A],
                        [0x37, 0x4B, 0xF4, 0x68, 0x60, 0x7F],
                        [0xBF, 0xC8, 0xE3, 0x53, 0xAF, 0x63],
                        [0x15, 0xCA, 0xFD, 0x61, 0x59, 0xF6],
                        [0x62, 0xEF, 0xD8, 0x0A, 0xB7, 0x15],
                        [0x98, 0x7A, 0x7F, 0x7F, 0x1A, 0x35],
                        [0xC4, 0x10, 0x4F, 0xA3, 0xC5, 0x26],
                        [0x4C, 0x96, 0x1F, 0x23, 0xE6, 0xBE],
                        [0x67, 0x54, 0x69, 0x72, 0xBC, 0x69],
                        [0xF4, 0xCD, 0x5D, 0x4C, 0x13, 0xFF],
                        [0x94, 0x41, 0x4C, 0x1A, 0x07, 0xDC],
                        [0x16, 0x55, 0x1D, 0x52, 0xFD, 0x20],
                        [0x9C, 0xB2, 0x90, 0x28, 0x2F, 0x7D],
                        [0x77, 0xA8, 0x41, 0x70, 0xB5, 0x74],
                        [0xED, 0x64, 0x6C, 0x83, 0xA4, 0xF3],
                        [0xE7, 0x03, 0x58, 0x9D, 0xB5, 0x0B],
                        [0x51, 0x3C, 0x85, 0xD0, 0x6C, 0xDE],
                        [0x95, 0x09, 0x3F, 0x0B, 0x2E, 0x22],
                        [0x54, 0x3B, 0x01, 0xB2, 0x7A, 0x95],
                        [0xC6, 0xD3, 0x75, 0xB9, 0x99, 0x72],
                        [0xEE, 0x4C, 0xC5, 0x72, 0xB4, 0x0E],
                        [0x51, 0x06, 0xCA, 0x7E, 0x4A, 0x69],
                        [0xC9, 0x6B, 0xD1, 0xCE, 0x60, 0x7F],
                        [0x16, 0x7A, 0x1B, 0xE1, 0x02, 0xE0],
                        [0xA8, 0xD0, 0xD8, 0x50, 0xA6, 0x06],
                        [0xA2, 0xAB, 0xB6, 0x93, 0xCE, 0x34],
                        [0x7B, 0x29, 0x6C, 0x40, 0xC4, 0x86],
                        [0x91, 0xF9, 0x3A, 0x55, 0x64, 0xC9],
                        [0xE1, 0x06, 0x23, 0xE7, 0xA0, 0x16],
                        [0xB7, 0x25, 0xF9, 0xCB, 0xF1, 0x83],
                        [0x04, 0x4C, 0xE1, 0x87, 0x2B, 0xC3],
                        [0x04, 0x5C, 0xEC, 0xA1, 0x55, 0x35],
                        [0x0B, 0xE5, 0xFA, 0xC8, 0xB0, 0x6A],
                        [0x0C, 0xE7, 0xCD, 0x2C, 0xC7, 0x2B],
                        [0x0E, 0xB2, 0x3C, 0xC8, 0x11, 0x0B],
                        [0x0F, 0x01, 0xCE, 0xFF, 0x27, 0x42],
                        [0x0F, 0x31, 0x81, 0x30, 0xED, 0x18],
                        [0x11, 0x4D, 0x6B, 0xE9, 0x44, 0x0C],
                        [0x18, 0xE3, 0xA0, 0x2B, 0x5E, 0xFF],
                        [0x19, 0xFC, 0x84, 0xA3, 0x78, 0x4B],
                        [0x1B, 0x61, 0xB2, 0xE7, 0x8C, 0x75],
                        [0x22, 0x05, 0x2B, 0x48, 0x0D, 0x11],
                        [0x33, 0x67, 0xBF, 0xAA, 0x91, 0xDB],
                        [0x3A, 0x8A, 0x13, 0x9C, 0x20, 0xB4],
                        [0x42, 0xE9, 0xB5, 0x4E, 0x51, 0xAB],
                        [0x46, 0xD7, 0x8E, 0x85, 0x0A, 0x7E],
                        [0x4B, 0x60, 0x98, 0x76, 0xBB, 0xA3],
                        [0x51, 0x8D, 0xC6, 0xEE, 0xA0, 0x89],
                        [0x6B, 0x07, 0x87, 0x7E, 0x2C, 0x5C],
                        [0x72, 0x59, 0xFA, 0x01, 0x97, 0xC6],
                        [0x72, 0xF9, 0x6B, 0xDD, 0x37, 0x14],
                        [0x74, 0x13, 0xB5, 0x99, 0xC4, 0xEA],
                        [0x77, 0xDA, 0xBC, 0x98, 0x25, 0xE1],
                        [0x7A, 0x39, 0x6F, 0x0D, 0x63, 0x3D],
                        [0x7A, 0x86, 0xAA, 0x20, 0x37, 0x88],
                        [0x87, 0x91, 0xB2, 0xCC, 0xB5, 0xC4],
                        [0x8A, 0x8D, 0x88, 0x15, 0x1A, 0x00],
                        [0x8C, 0x97, 0xCD, 0x7A, 0x0E, 0x56],
                        [0x8E, 0x26, 0xE4, 0x5E, 0x7D, 0x65],
                        [0x9D, 0x99, 0x3C, 0x5D, 0x4E, 0xF4],
                        [0x9E, 0xA3, 0x38, 0x7A, 0x63, 0xC1],
                        [0xA3, 0xFA, 0xA6, 0xDA, 0xFF, 0x67],
                        [0xA7, 0x14, 0x11, 0x47, 0xD4, 0x30],
                        [0xAC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF],
                        [0xAF, 0xCE, 0xF6, 0x4C, 0x99, 0x13],
                        [0xB2, 0x7A, 0xDD, 0xFB, 0x64, 0xB0],
                        [0xB8, 0x1F, 0x2B, 0x0C, 0x2F, 0x66],
                        [0xB9, 0xF8, 0xA7, 0xD8, 0x39, 0x78],
                        [0xBA, 0xFF, 0x30, 0x53, 0xB4, 0x96],
                        [0xBB, 0x52, 0xF8, 0xCC, 0xE0, 0x7F],
                        [0xBC, 0x2D, 0x17, 0x91, 0xDE, 0xC1],
                        [0xBC, 0x45, 0x80, 0xB7, 0xF2, 0x0B],
                        [0xC6, 0x5D, 0x4E, 0xAA, 0x64, 0x5B],
                        [0xC7, 0x6B, 0xF7, 0x1A, 0x25, 0x09],
                        [0xD5, 0x52, 0x4F, 0x59, 0x1E, 0xED],
                        [0xE3, 0x28, 0xA1, 0xC7, 0x15, 0x6D],
                        [0xE4, 0x82, 0x1A, 0x37, 0x7B, 0x75],
                        [0xE5, 0x6A, 0xC1, 0x27, 0xDD, 0x45],
                        [0xEA, 0x0F, 0xD7, 0x3C, 0xB1, 0x49],
                        [0xFC, 0x00, 0x01, 0x87, 0x7B, 0xF7],
                        [0xFD, 0x87, 0x05, 0xE7, 0x21, 0xB0],
                        [0x00, 0xAD, 0xA2, 0xCD, 0x51, 0x6D],
                        [0x51, 0x81, 0x08, 0xE0, 0x61, 0xE2],
                        [0x55, 0x8A, 0xAD, 0x64, 0xEB, 0x5B],
                        [0x00, 0x11, 0x22, 0x33, 0x44, 0x55],
                        [0x6C, 0xA7, 0x61, 0xAB, 0x6C, 0xA7],
                        [0xB1, 0xC4, 0xA8, 0xF7, 0xF6, 0xE3],
                        [0xFF, 0x75, 0xAF, 0xDA, 0x5A, 0x3C],
                        [0xFC, 0xDD, 0xF7, 0x76, 0x7C, 0x10],
                        [0xA6, 0xB3, 0xF6, 0xC8, 0xF1, 0xD4],
                        [0x23, 0x7A, 0x4D, 0x0D, 0x91, 0x19],
                        [0x0E, 0xD7, 0x84, 0x6C, 0x2B, 0xC9],
                        [0xFF, 0xFF, 0xD0, 0x6F, 0x83, 0xE3],
                        [0xFF, 0xFF, 0xAE, 0x82, 0x36, 0x6C],
                        [0xF8, 0x9C, 0x86, 0xB2, 0xA9, 0x61],
                        [0xF8, 0x34, 0x66, 0x88, 0x86, 0x12],
                        [0xED, 0x3A, 0x7E, 0xFB, 0xFF, 0x56],
                        [0xE9, 0x62, 0x46, 0x53, 0x13, 0x42],
                        [0xE1, 0xDD, 0x28, 0x43, 0x79, 0xD4],
                        [0xDF, 0xED, 0x39, 0xFF, 0xBB, 0x76],
                        [0xDB, 0x51, 0x81, 0xC9, 0x2C, 0xBE],
                        [0xCF, 0xC7, 0x38, 0x40, 0x3A, 0xB0],
                        [0xBC, 0xFE, 0x01, 0xBC, 0xFE, 0x01],
                        [0xBA, 0x28, 0xCF, 0xD1, 0x5E, 0xE8],
                        [0xB0, 0x69, 0x9A, 0xD0, 0x3D, 0x17],
                        [0xAA, 0xBB, 0xCC, 0x66, 0x04, 0x29],
                        [0xA4, 0xEF, 0x6C, 0x3B, 0xB6, 0x92],
                        [0xA2, 0xB2, 0xC9, 0xD1, 0x87, 0xFB],
                        [0x9B, 0x1D, 0xD7, 0xC0, 0x30, 0xA1],
                        [0x9A, 0xED, 0xF9, 0x93, 0x1E, 0xC1],
                        [0x8F, 0x9B, 0x22, 0x90, 0x47, 0xAC],
                        [0x87, 0x2B, 0x71, 0xF9, 0xD1, 0x5A],
                        [0x83, 0x3F, 0xBD, 0x3C, 0xFE, 0x51],
                        [0x5D, 0x29, 0x3A, 0xFC, 0x8D, 0x7E],
                        [0x55, 0x54, 0xAA, 0xA9, 0x63, 0x21],
                        [0x47, 0x42, 0x49, 0x43, 0x75, 0x69],
                        [0x43, 0x53, 0x30, 0x66, 0x66, 0x66],
                        [0x1A, 0x2B, 0x3C, 0x4D, 0x5E, 0x6F],
                        [0x12, 0x34, 0x56, 0xAB, 0xCD, 0xEF],
                        [0x83, 0xBA, 0xB5, 0xAC, 0xAD, 0x62],
                        [0x64, 0xE2, 0x28, 0x3F, 0xCF, 0x5E],
                        [0x64, 0xA2, 0xEE, 0x93, 0xB1, 0x2B],
                        [0x46, 0x86, 0x8F, 0x6D, 0x56, 0x77],
                        [0x40, 0xE5, 0xEA, 0x1E, 0xFC, 0x00],
                        [0x37, 0xD4, 0xDC, 0xA9, 0x24, 0x51],
                        [0x20, 0x12, 0x05, 0x30, 0x82, 0xAD],
                        [0x20, 0x11, 0x09, 0x21, 0x19, 0xF1],
                        [0x20, 0x03, 0x06, 0x20, 0x20, 0x33],
                        [0x17, 0x95, 0x90, 0x2D, 0xBA, 0xF9],
                        [0x17, 0x50, 0x55, 0x86, 0xEF, 0x02],
                        [0x02, 0x2F, 0xE4, 0x8B, 0x30, 0x72],
                        [0x01, 0x39, 0x40, 0x23, 0x33, 0x13],
                        [0xA5, 0x06, 0x37, 0x0E, 0x7C, 0x0F],
                        [0x26, 0x39, 0x6F, 0x20, 0x42, 0xE7],
                        [0x70, 0x75, 0x8F, 0xDD, 0x31, 0xE0],
                        [0x9F, 0x9D, 0x8E, 0xED, 0xDC, 0xCE],
                        [0x06, 0xFF, 0x5F, 0x03, 0xAA, 0x1A],
                        [0x40, 0x98, 0x65, 0x32, 0x89, 0xD3],
                        [0x90, 0x47, 0x35, 0xF0, 0x0F, 0x9E],
                        [0xB4, 0xC3, 0x6C, 0x79, 0xDA, 0x8D],
                        [0x68, 0xF9, 0xA1, 0xF0, 0xB4, 0x24],
                        [0x5A, 0x85, 0x53, 0x63, 0x95, 0xB3],
                        [0x7D, 0xD3, 0x99, 0xD4, 0xE8, 0x97],
                        [0xEF, 0x4C, 0x5A, 0x7A, 0xC6, 0xFC],
                        [0xB4, 0x70, 0x58, 0x13, 0x91, 0x87],
                        [0x82, 0x68, 0x04, 0x6C, 0xD1, 0x54],
                        [0x67, 0xCC, 0x03, 0xB7, 0xD5, 0x77] ]

    
    #load key
    load_key = [0xFF, 0x82, 0x20, 0x00, 0x06]
    
    #auth using key
    auth_key = [0xFF, 0x86, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x60, 0x00]

    i = 0
    successful_loading_counter = 0
    successful_authentication_counter = 0

    print("\nBRUTE FORCED KEYS LOADED AND AUTHENTICATED:\n")
    
    for i in brute_forced_keys:
        command1 = load_key + i
        data, sw1, sw2 = connection.transmit(command1)
        
        if sw1 == 0x90 or sw1 == 0x61:
            #print("\nThe key was loaded successfully : " + toHexString( command1 ) + "\n")
            successful_loading_counter+=1
            #if select command works, then disable the verification
            #print(f"sw1 = {str(toHexString([sw1]))}, sw2 = {str(toHexString([sw2]))}, data={str([data])}")
            
            command2=auth_key 
            
            data2, sw1_2, sw2_2 = connection.transmit(command2)

            if sw1_2 == 0x90 or sw1_2 == 0x61:
                print("The key authenticated successfully : " + toHexString( command2 ))
                successful_authentication_counter+=1
                #print(f"sw1 = { str(toHexString([sw1_2]))}, sw2 = {str(toHexString([sw2_2]))}, data= {str([data2])}")
                #Start checking sector read
                mifare_sector_read.mifare_sector_read(connection)
            else: 
                print(f"\rThe key authentication was unsuccessful! : {toHexString( i )}",end='',flush=True)
                #print("\r\rsw1 = " + str(toHexString([sw1_2])) + ", sw2 = " + str(toHexString([sw2_2])) + ", data= " + str([data2]))
        else:
            print(f"\rUnfortunately the key did not successfully load!:{toHexString( command1 )}",end='',flush=True)
            #print([sw1] + [sw2] + [data])
            break

    print("\n\nBRUTE FORCED KEY COUNT:")
    print("\nSuccessful key loading: " + str(successful_loading_counter))
    print("Successful attempts at authentication: " + str(successful_authentication_counter))
    


if __name__ == "__main__":
    load_and_auth_brute_forced_keys()
